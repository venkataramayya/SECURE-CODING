AES:
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
public class AES{
 public static void main(String[] args) throws Exception {
 String message="iameswar";
 byte[] myMessage =message.getBytes();
 KeyGenerator Mygenerator = KeyGenerator.getInstance("AES");
 SecretKey myDesKey = Mygenerator.generateKey();
 Cipher myCipher = Cipher.getInstance("AES");
 myCipher.init(Cipher.ENCRYPT_MODE, myDesKey);
 byte[] myEncryptedBytes=myCipher.doFinal(myMessage);
 myCipher.init(Cipher.DECRYPT_MODE, myDesKey);
 byte[] myDecryptedBytes=myCipher.doFinal(myEncryptedBytes);
 String encrypteddata=new String(myEncryptedBytes);
 String decrypteddata=new String(myDecryptedBytes);
 System.out.println("Message : "+ message);
 System.out.println("Encrypted - "+ encrypteddata);
 System.out.println("Decrypted Message - "+ decrypteddata);
 }
}



DES:
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
class DES{
 public static void main(String[] args) throws Exception {

 String message="iameswar";
 byte[] myMessage =message.getBytes();
 KeyGenerator Mygenerator = KeyGenerator.getInstance("DES");
 SecretKey myDesKey = Mygenerator.generateKey();
 Cipher myCipher = Cipher.getInstance("DES");
 myCipher.init(Cipher.ENCRYPT_MODE, myDesKey);
 byte[] myEncryptedBytes=myCipher.doFinal(myMessage);
 myCipher.init(Cipher.DECRYPT_MODE, myDesKey);
 byte[] myDecryptedBytes=myCipher.doFinal(myEncryptedBytes);
 String encrypteddata=new String(myEncryptedBytes);
 String decrypteddata=new String(myDecryptedBytes);
 System.out.println("Message : "+ message);
 System.out.println("Encrypted - "+ encrypteddata);
 System.out.println("Decrypted Message - "+ decrypteddata);
 }
}
DSS:-
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.util.Scanner;
public class DigitalSignature {
public static void main(String args[]) throws Exception {
Scanner sc = new Scanner(System.in);
System.out.println("Enter some text");
String msg = sc.nextLine();
KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("DSA");
keyPairGen.initialize(2048);
KeyPair pair = keyPairGen.generateKeyPair();
PrivateKey privKey = pair.getPrivate();
PublicKey pubKey = pair.getPublic();
System.out.println(privKey);
System.out.println(pubKey);
Signature sign = Signature.getInstance("SHA256withDSA");
sign.initSign(privKey);
byte[] bytes = "msg".getBytes();
sign.update(bytes);
byte[] signature = sign.sign();
for(int i=0;i<signature.length;i++)
System.out.print(" "+signature[i]);
System.out.println();
sign.initVerify(pair.getPublic());
sign.update(bytes);
boolean bool = sign.verify(signature);
if(bool)
System.out.println("Signature verified");
else
System.out.println("Signature failed");
sc.close();
}
}



EXPT3:-
import java.util.Scanner;
class Test4{
public static final String alpha="abcdefghijklmnopqrstuvwxyzabcdefghijk";
String key,plain,temp,plainTemp="";
int a,b,c;
Test4(String key ,String plain)
{
this.key=key;
this.plain=plain;
}
void keyMakeUp()
{
a=plain.length();
b=key.length();
if (a==b)
{
String w=encrydecry(key,plain);
String x=encrydecry(key,w);
System.out.println(w);
System.out.println(x);;
}
else {
String temp=key;
c=a-b;
int j=0;
for(int i=0;i<c;i++)
{
temp=temp+key.charAt(j);
j++;
if(j>=b)
j=0;
}
key=temp;
String w=encrydecry(key,plain);
String x=encrydecry(key,w);
System.out.println(w);
System.out.println(x);;
}
}
String encrydecry(String ch, String ph)
{
String cipher="";
for(int i=0;i<key.length();i++)
{
String p = Integer.toBinaryString(alpha.indexOf(ch.charAt(i)));
String q = Integer.toBinaryString(alpha.indexOf(ph.charAt(i)));
//System.out.println(p+" "+q);
String ans = "";
int z=p.length();
int y=q.length(),w;
if (z>y) {
w=z-y;
for (int j = 0; j < w; j++)
 {
 q= "0" + q;
 }
}
else {
w=y-z;
for (int j = 0; j < w; j++)
 {
 p = "0" + p;
 }
}
 // System.out.println(p+" "+q);
 for (int k = 0; k <p.length() ; k++)
 {
 // If the Character matches
 if (p.charAt(k) == q.charAt(k))
 ans += "0";
 else
 ans += "1";
 }

 //System.out.println(ans);
 int l = Integer.parseInt(ans,2);
 ans="";
 cipher+=alpha.charAt(l);
}
return cipher;
}
}
public class Expt_3 {
public static void main(String[] args) {
String key,plain;
Scanner s = new Scanner(System.in);
System.out.println("Enter key text");
key=s.next();
System.out.println("Enter plain Text");
plain=s.next();
Test4 t = new Test4(key,plain);
t.keyMakeUp();
s.close();
}
}



MD5:
import java.math.BigInteger; import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
public class MD5{
public static String getMd5(String input)
{
try {
MessageDigest md = MessageDigest.getInstance("MD5");
byte[] messageDigest = md.digest(input.getBytes());
BigInteger no = new BigInteger(1, messageDigest);
String hashtext = no.toString(16);
while (hashtext.length() < 32) {
hashtext = "0" + hashtext;
}
return hashtext;
}
catch (NoSuchAlgorithmException e) {
throw new RuntimeException(e);
}
}
// Driver code
public static void main(String args[]) throws NoSuchAlgorithmException
{
String s = "cryptographynetwork";
System.out.println("Your HashCode Generated by MD5 is: " + getMd5(s));
}
}


RSA:
import java.math.BigInteger;
import java.security.SecureRandom;
public class RSA {
private final static BigInteger one = new BigInteger("1");
private final static SecureRandom random = new SecureRandom();
private BigInteger privateKey;
private BigInteger publicKey;
private BigInteger modulus;
RSA(int N) {
BigInteger p = BigInteger.probablePrime(N/2, random);
BigInteger q = BigInteger.probablePrime(N/2, random);
BigInteger phi = (p.subtract(one)).multiply(q.subtract(one));
System.out.println("prime p = " + p);
System.out.println("prime q = " + q);
modulus = p.multiply(q); System.out.println("phi = " + phi);
publicKey = new BigInteger("65537");
privateKey = publicKey.modInverse(phi);
}
BigInteger encrypt(BigInteger message) {
return message.modPow(publicKey, modulus);
}
BigInteger decrypt(BigInteger encrypted) {
return encrypted.modPow(privateKey, modulus);
}
public String toString() { String s = "";
s += "public = " + publicKey + "\n"; s += "private = " + privateKey + "\n"; s += "modulus = " +
modulus; return s;
}
public static void main(String[] args) {
int N = Integer.parseInt(args[0]);
RSA key = new RSA(N);
System.out.println(key);
BigInteger message = new BigInteger("8");
BigInteger encrypt = key.encrypt(message);
BigInteger decrypt = key.decrypt(encrypt);
System.out.println("message = " + message);
System.out.println("encrypted = " + encrypt);
System.out.println("decrypted = " + decrypt);
}
}



SHA:
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
public class SHA {
public static String getSHA(String input)
{
try {
MessageDigest hash = MessageDigest.getInstance("SHA-256");
byte[] messageDigest = hash.digest(input.getBytes());
BigInteger no = new BigInteger(1, messageDigest);
String hashtext = no.toString(16);
while (hashtext.length() < 32) { hashtext = "0" + hashtext;
}
return hashtext;
}
catch (NoSuchAlgorithmException e) {
throw new RuntimeException(e);
}
}
public static void main(String args[]) throws NoSuchAlgorithmException
{
String s = "cryptographynetwork";
System.out.println("Your HashCode Generated by SHA is: " + getSHA(s));
}
}
